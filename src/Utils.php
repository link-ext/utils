<?phpnamespace LinkSoft;class Utils{    /**     * 市场 => 类型     * @param $market     * @return string     */    public static function market2type($market): string    {        $contrast = ['US' => 'US', 'HKEX' => 'HK', 'SSE' => 'CN', 'SZSE' => 'CN'];        return $contrast[$market] ?? 'HK';    }    /**     * 类型 => 市场     * @param $type     * @return string     */    public static function type2market($type): string    {        $contrast = ['US' => 'US', 'HK' => 'HKEX', 'CN' => 'SSE,SZSE'];        return $contrast[$type] ?? 'HKEX';    }    /**     * 市场 => 币种     * @param $market     * @return string     */    public static function market2currency($market): string    {        $contrast = ['US' => 'USD', 'HKEX' => 'HKD', 'SZSE' => 'CNY', 'SSE' => 'CNY'];        return $contrast[$market] ?? 'HKD';    }    /**     * 市场 => 类型     * @param $value     * @return mixed|string     */    public static function currency2type($value)    {        $contrast = ['CNY' => 'CN', 'HKD' => 'HK', 'USD' => 'US'];        return $contrast[$value] ?? 'CN';    }    /**     * 客户端 => 平台     * @param $client     * @return string     */    public static function client2platform($client)    {        $platform = 'PC';        if ($client == 'iOS' || $client == 'Android') $platform = 'App';        return $platform;    }    /**     * 加盐加密     * @param $password     * @param $salt     * @return string     */    public static function encrypt_password($password, $salt): string    {        return md5(md5($password) . $salt);    }    /**     * *号隐藏     * @param $str     * @param $start     * @param $end     * @return string     */    public static function add_star($str, $start, $end): string    {        if (empty($str)) {            return '';        }        return mb_substr($str, 0, $start) . '****' . mb_substr($str, 0 - $end);    }    /**     * 随机值     * @param string $type     * @param int $len     * @return bool|string     */    public static function random($type = 'alnum', $len = 8)    {        switch ($type) {            case 'alpha':            case 'alnum':            case 'numeric':            case 'nozero':                switch ($type) {                    case 'alpha':                        $pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';                        break;                    case 'alnum':                        $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';                        break;                    case 'numeric':                        $pool = '0123456789';                        break;                    case 'nozero':                        $pool = '123456789';                        break;                }                return substr(str_shuffle(str_repeat($pool, intval(ceil($len / strlen($pool))))), 0, $len);            case 'unique':            case 'md5':                return md5(uniqid(mt_rand()));            case 'encrypt':            case 'sha1':                return sha1(uniqid(mt_rand(), true));        }        return '';    }    /**     * 二维数组排序     * @param $array     * @param $keys     * @param $sort     * @return mixed     */    public static function array_sort($array, $keys, $sort)    {        $contract = ['DESC' => SORT_DESC, 'ASC' => SORT_ASC];        $keysValue = [];        foreach ($array as $k => $v) {            $keysValue[$k] = $v[$keys];        }        array_multisort($keysValue, $contract[$sort] ?? SORT_DESC, $array);        return $array;    }    /**     * 处理保留位数     * @param $number     * @param int $point     * @return string     */    public static function deal_number($number, $point = 2)    {        return strval(intval($number * pow(10, $point)) / pow(10, $point));    }    /**     * 计算金额     * @param array $config = [     *     "min"=>0,     *     "us"=>1,     *     "max"=>2     * ]     * @param $amount     * @return float|int|mixed     */    public static function calc_by_conf(array $config, $amount)    {        if (isset($config['min']) && !empty($config['min'])) {            if (isset($config['max']) && !empty($config['max'])) {                $fare = min(max($config['us'] * $amount, $config['min']), $config['max']);            } else {                $fare = max($config['us'] * $amount, $config['min']);            }        } else {            if (isset($config['max']) && !empty($config['max'])) {                $fare = min($config['us'] * $amount, $config['max']);            } else {                $fare = $config['us'] * $amount;            }        }        return $fare;    }}